<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Modern Office Management</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            --primary-color: #4361ee;
            --secondary-color: #3f37c9;
            --accent-color: #4895ef;
            --light-color: #f8f9fa;
            --dark-color: #212529;
            --success-color: #4cc9f0;
            --warning-color: #f8961e;
            --danger-color: #f72585;
            --sidebar-width: 280px;
            --transition-speed: 0.3s;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }

        body {
            background-color: #f5f7fa;
            color: var(--dark-color);
            transition: background-color 0.5s ease;
        }

        .app-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar Styles */
        .sidebar {
            width: var(--sidebar-width);
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            height: 100vh;
            position: fixed;
            transition: all var(--transition-speed) ease;
            z-index: 100;
            box-shadow: 2px 0 10px rgba(0, 0, 0, 0.1);
            transform: translateX(0);
        }

        .sidebar.collapsed {
            transform: translateX(calc(var(--sidebar-width) * -1));
        }

        .sidebar-header {
            padding: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
        }

        .sidebar-header h2 {
            font-weight: 600;
            font-size: 1.5rem;
            display: flex;
            align-items: center;
        }

        .sidebar-header h2 i {
            margin-right: 10px;
        }

        .toggle-btn {
            background: none;
            border: none;
            color: white;
            font-size: 1.2rem;
            cursor: pointer;
            transition: transform 0.3s ease;
        }

        .toggle-btn:hover {
            transform: scale(1.1);
        }

        .sidebar-menu {
            padding: 20px 0;
            height: calc(100vh - 180px);
            overflow-y: auto;
        }

        .menu-item {
            padding: 12px 20px;
            display: flex;
            align-items: center;
            cursor: pointer;
            transition: all 0.2s ease;
            position: relative;
            overflow: hidden;
        }

        .menu-item:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        .menu-item.active {
            background: rgba(255, 255, 255, 0.2);
        }

        .menu-item.active::before {
            content: '';
            position: absolute;
            left: 0;
            top: 0;
            height: 100%;
            width: 4px;
            background: white;
        }

        .menu-item i {
            margin-right: 12px;
            font-size: 1.1rem;
            width: 24px;
            text-align: center;
        }

        .menu-item span {
            font-weight: 500;
        }

        .sidebar-footer {
            padding: 20px;
            position: absolute;
            bottom: 0;
            width: 100%;
            background: rgba(0, 0, 0, 0.1);
            display: flex;
            justify-content: space-between;
        }

        .theme-switcher {
            margin-bottom: 10px;
        }

        .theme-options {
            display: flex;
            justify-content: space-between;
            margin-top: 10px;
        }

        .theme-option {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            cursor: pointer;
            border: 2px solid white;
            transition: transform 0.2s ease;
        }

        .theme-option:hover {
            transform: scale(1.1);
        }

        /* Main Content Styles */
        .main-content {
            flex: 1;
            margin-left: var(--sidebar-width);
            transition: margin-left var(--transition-speed) ease;
            padding: 20px;
        }

        .main-content.expanded {
            margin-left: 0;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 25px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            margin-bottom: 25px;
            animation: slideDown 0.5s ease;
        }

        .header h1 {
            font-size: 1.8rem;
            color: var(--primary-color);
        }

        .user-profile {
            display: flex;
            align-items: center;
        }

        .user-profile img {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            margin-right: 10px;
            object-fit: cover;
        }

        .user-info {
            text-align: right;
        }

        .user-name {
            font-weight: 600;
            font-size: 0.9rem;
        }

        .user-role {
            font-size: 0.8rem;
            color: #6c757d;
        }

        /* Dashboard Cards */
        .dashboard-cards {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }

        .card {
            background: white;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            transition: all 0.3s ease;
            cursor: pointer;
            position: relative;
            overflow: hidden;
        }

        .card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .card::after {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 5px;
        }

        .card.employees::after {
            background: var(--primary-color);
        }

        .card.attendance::after {
            background: var(--success-color);
        }

        .card.payroll::after {
            background: var(--warning-color);
        }

        .card.tasks::after {
            background: var(--danger-color);
        }

        .card-icon {
            font-size: 2rem;
            margin-bottom: 15px;
        }

        .card.employees .card-icon {
            color: var(--primary-color);
        }

        .card.attendance .card-icon {
            color: var(--success-color);
        }

        .card.payroll .card-icon {
            color: var(--warning-color);
        }

        .card.tasks .card-icon {
            color: var(--danger-color);
        }

        .card-title {
            font-size: 0.9rem;
            color: #6c757d;
            margin-bottom: 5px;
        }

        .card-value {
            font-size: 1.8rem;
            font-weight: 700;
            margin-bottom: 10px;
        }

        .card-change {
            font-size: 0.8rem;
            display: flex;
            align-items: center;
        }

        .card-change.positive {
            color: #28a745;
        }

        .card-change.negative {
            color: #dc3545;
        }

        /* Tab Content */
        .tab-content {
            display: none;
            animation: fadeIn 0.5s ease;
        }

        .tab-content.active {
            display: block;
        }

        /* Form Styles */
        .form-container {
            background: white;
            border-radius: 10px;
            padding: 25px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            margin-bottom: 30px;
        }

        .form-title {
            font-size: 1.3rem;
            margin-bottom: 20px;
            color: var(--primary-color);
            display: flex;
            align-items: center;
        }

        .form-title i {
            margin-right: 10px;
        }

        .form-row {
            display: flex;
            flex-wrap: wrap;
            margin: 0 -10px;
        }

        .form-group {
            flex: 1 0 200px;
            padding: 0 10px;
            margin-bottom: 20px;
            min-width: 200px;
        }

        .form-group label {
            display: block;
            margin-bottom: 8px;
            font-weight: 500;
            color: #495057;
        }

        .form-control {
            width: 100%;
            padding: 10px 15px;
            border: 1px solid #ced4da;
            border-radius: 5px;
            font-size: 0.9rem;
            transition: all 0.3s ease;
        }

        .form-control:focus {
            outline: none;
            border-color: var(--accent-color);
            box-shadow: 0 0 0 3px rgba(67, 97, 238, 0.2);
        }

        .btn {
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            font-size: 0.9rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }

        .btn i {
            margin-right: 8px;
        }

        .btn-primary {
            background: var(--primary-color);
            color: white;
        }

        .btn-primary:hover {
            background: var(--secondary-color);
            transform: translateY(-2px);
        }

        .btn-danger {
            background: var(--danger-color);
            color: white;
        }

        .btn-danger:hover {
            background: #d11464;
            transform: translateY(-2px);
        }

        /* Table Styles */
        .table-container {
            background: white;
            border-radius: 10px;
            padding: 25px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            overflow-x: auto;
        }

        .table-title {
            font-size: 1.3rem;
            margin-bottom: 20px;
            color: var(--primary-color);
            display: flex;
            align-items: center;
        }

        .table-title i {
            margin-right: 10px;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            padding: 12px 15px;
            text-align: left;
            border-bottom: 1px solid #e9ecef;
        }

        th {
            background: #f8f9fa;
            font-weight: 600;
            color: #495057;
            text-transform: uppercase;
            font-size: 0.8rem;
            letter-spacing: 0.5px;
        }

        tr:hover {
            background: #f8f9fa;
        }

        .status-badge {
            padding: 5px 10px;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .status-badge.present {
            background: #d4edda;
            color: #155724;
        }

        .status-badge.absent {
            background: #f8d7da;
            color: #721c24;
        }

        .status-badge.late {
            background: #fff3cd;
            color: #856404;
        }

        .status-badge.pending {
            background: #fff3cd;
            color: #856404;
        }

        .status-badge.completed {
            background: #d4edda;
            color: #155724;
        }

        .status-badge.paid {
            background: #d4edda;
            color: #155724;
        }

        .status-badge.processed {
            background: #cce5ff;
            color: #004085;
        }

        .action-btns {
            display: flex;
            gap: 5px;
        }

        .action-btn {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            transition: all 0.2s ease;
            background: transparent;
            border: none;
            color: #6c757d;
        }

        .action-btn:hover {
            background: #f8f9fa;
            color: var(--primary-color);
        }

        /* Report Styles */
        .report-card {
            background: white;
            border-radius: 10px;
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }

        .report-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid #e9ecef;
        }

        .report-title {
            font-size: 1.2rem;
            color: var(--primary-color);
        }

        .download-btn {
            background: var(--primary-color);
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 0.8rem;
            display: flex;
            align-items: center;
        }

        .download-btn i {
            margin-right: 5px;
        }

        .chart-container {
            height: 300px;
            margin-top: 20px;
            position: relative;
        }

        .chart-placeholder {
            width: 100%;
            height: 100%;
            background: #f8f9fa;
            border-radius: 5px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #6c757d;
            font-size: 1rem;
        }

        /* Settings Styles */
        .settings-section {
            background: white;
            border-radius: 10px;
            padding: 25px;
            margin-bottom: 20px;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        }

        .settings-title {
            font-size: 1.3rem;
            margin-bottom: 20px;
            color: var(--primary-color);
            display: flex;
            align-items: center;
        }

        .settings-title i {
            margin-right: 10px;
        }

        .settings-option {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 0;
            border-bottom: 1px solid #e9ecef;
        }

        .settings-option:last-child {
            border-bottom: none;
        }

        .option-info h4 {
            font-size: 1rem;
            margin-bottom: 5px;
        }

        .option-info p {
            font-size: 0.8rem;
            color: #6c757d;
        }

        .toggle-switch {
            position: relative;
            display: inline-block;
            width: 50px;
            height: 24px;
        }

        .toggle-switch input {
            opacity: 0;
            width: 0;
            height: 0;
        }

        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #ccc;
            transition: .4s;
            border-radius: 24px;
        }

        .slider:before {
            position: absolute;
            content: "";
            height: 16px;
            width: 16px;
            left: 4px;
            bottom: 4px;
            background-color: white;
            transition: .4s;
            border-radius: 50%;
        }

        input:checked + .slider {
            background-color: var(--primary-color);
        }

        input:checked + .slider:before {
            transform: translateX(26px);
        }

        /* Modal Styles */
        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            z-index: 1000;
            justify-content: center;
            align-items: center;
        }

        .modal-content {
            background-color: white;
            padding: 25px;
            border-radius: 10px;
            width: 90%;
            max-width: 600px;
            max-height: 90vh;
            overflow-y: auto;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.2);
            animation: modalFadeIn 0.3s ease;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #e9ecef;
        }

        .modal-title {
            font-size: 1.5rem;
            color: var(--primary-color);
        }

        .close-modal {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #6c757d;
        }

        /* Animations */
        @keyframes slideDown {
            from {
                transform: translateY(-20px);
                opacity: 0;
            }
            to {
                transform: translateY(0);
                opacity: 1;
            }
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
            }
            to {
                opacity: 1;
            }
        }

        @keyframes pulse {
            0% {
                transform: scale(1);
            }
            50% {
                transform: scale(1.05);
            }
            100% {
                transform: scale(1);
            }
        }

        @keyframes modalFadeIn {
            from {
                opacity: 0;
                transform: translateY(-20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Responsive Styles */
        @media (max-width: 992px) {
            .sidebar {
                transform: translateX(calc(var(--sidebar-width) * -1));
            }
            .sidebar.collapsed {
                transform: translateX(0);
            }
            .main-content {
                margin-left: 0;
            }
        }

        @media (max-width: 768px) {
            .form-group {
                flex: 1 0 100%;
            }
            .dashboard-cards {
                grid-template-columns: 1fr 1fr;
            }
        }

        @media (max-width: 576px) {
            .dashboard-cards {
                grid-template-columns: 1fr;
            }
            .header {
                flex-direction: column;
                align-items: flex-start;
            }
            .user-profile {
                margin-top: 15px;
            }
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="sidebar-header">
                <h2><i class="fas fa-briefcase"></i> OfficePro</h2>
                <button class="toggle-btn" id="sidebarToggle">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="sidebar-menu">
                <div class="menu-item active" data-tab="dashboard">
                    <i class="fas fa-tachometer-alt"></i>
                    <span>Dashboard</span>
                </div>
                <div class="menu-item" data-tab="employees">
                    <i class="fas fa-users"></i>
                    <span>Employees</span>
                </div>
                <div class="menu-item" data-tab="attendance">
                    <i class="fas fa-calendar-check"></i>
                    <span>Attendance</span>
                </div>
                <div class="menu-item" data-tab="payroll">
                    <i class="fas fa-money-bill-wave"></i>
                    <span>Payroll</span>
                </div>
                <div class="menu-item" data-tab="tasks">
                    <i class="fas fa-tasks"></i>
                    <span>Tasks</span>
                </div>
                <div class="menu-item" data-tab="reports">
                    <i class="fas fa-chart-bar"></i>
                    <span>Reports</span>
                </div>
                <div class="menu-item" data-tab="settings">
                    <i class="fas fa-cog"></i>
                    <span>Settings</span>
                </div>
            </div>
            <div class="sidebar-footer">
                <div class="theme-switcher">
                    <label>Theme Color</label>
                    <div class="theme-options">
                        <div class="theme-option" style="background: #4361ee;" data-theme="default"></div>
                        <div class="theme-option" style="background: #3a0ca3;" data-theme="dark-blue"></div>
                        <div class="theme-option" style="background: #7209b7;" data-theme="purple"></div>
                        <div class="theme-option" style="background: #f72585;" data-theme="pink"></div>
                        <div class="theme-option" style="background: #4cc9f0;" data-theme="teal"></div>
                    </div>
                </div>
                <button class="toggle-btn" id="hideSidebar">
                    <i class="fas fa-chevron-left"></i>
                </button>
            </div>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <!-- Header -->
            <div class="header">
                <div>
                    <button class="toggle-btn" id="mobileToggle">
                        <i class="fas fa-bars"></i>
                    </button>
                    <h1 id="pageTitle">Dashboard</h1>
                </div>
                <div class="user-profile">
                    <img src="https://randomuser.me/api/portraits/men/32.jpg" alt="User">
                    <div class="user-info">
                        <div class="user-name">Rahul Sharma</div>
                        <div class="user-role">Administrator</div>
                    </div>
                </div>
            </div>

            <!-- Dashboard Tab -->
            <div id="dashboard" class="tab-content active">
                <div class="dashboard-cards">
                    <div class="card employees">
                        <div class="card-icon">
                            <i class="fas fa-users"></i>
                        </div>
                        <div class="card-title">Total Employees</div>
                        <div class="card-value">124</div>
                        <div class="card-change positive">
                            <i class="fas fa-arrow-up"></i> 12% from last month
                        </div>
                    </div>
                    <div class="card attendance">
                        <div class="card-icon">
                            <i class="fas fa-calendar-check"></i>
                        </div>
                        <div class="card-title">Today's Attendance</div>
                        <div class="card-value">89%</div>
                        <div class="card-change negative">
                            <i class="fas fa-arrow-down"></i> 3% from yesterday
                        </div>
                    </div>
                    <div class="card payroll">
                        <div class="card-icon">
                            <i class="fas fa-money-bill-wave"></i>
                        </div>
                        <div class="card-title">Monthly Payroll</div>
                        <div class="card-value">₹4,82,560</div>
                        <div class="card-change positive">
                            <i class="fas fa-arrow-up"></i> 8% from last month
                        </div>
                    </div>
                    <div class="card tasks">
                        <div class="card-icon">
                            <i class="fas fa-tasks"></i>
                        </div>
                        <div class="card-title">Pending Tasks</div>
                        <div class="card-value">17</div>
                        <div class="card-change positive">
                            <i class="fas fa-arrow-down"></i> 5 from yesterday
                        </div>
                    </div>
                </div>

                <div class="table-container">
                    <div class="table-title">
                        <i class="fas fa-clock"></i> Recent Attendance
                    </div>
                    <table>
                        <thead>
                            <tr>
                                <th>Employee</th>
                                <th>Date</th>
                                <th>Check In</th>
                                <th>Check Out</th>
                                <th>Status</th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr>
                                <td>Rahul Sharma</td>
                                <td>2023-06-15</td>
                                <td>09:05 AM</td>
                                <td>06:30 PM</td>
                                <td><span class="status-badge present">Present</span></td>
                            </tr>
                            <tr>
                                <td>Priya Patel</td>
                                <td>2023-06-15</td>
                                <td>09:15 AM</td>
                                <td>06:45 PM</td>
                                <td><span class="status-badge present">Present</span></td>
                            </tr>
                            <tr>
                                <td>Amit Singh</td>
                                <td>2023-06-15</td>
                                <td>09:30 AM</td>
                                <td>-</td>
                                <td><span class="status-badge late">Late</span></td>
                            </tr>
                            <tr>
                                <td>Neha Gupta</td>
                                <td>2023-06-15</td>
                                <td>-</td>
                                <td>-</td>
                                <td><span class="status-badge absent">Absent</span></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Employees Tab -->
            <div id="employees" class="tab-content">
                <div class="form-container">
                    <div class="form-title">
                        <i class="fas fa-user-plus"></i> Add New Employee
                    </div>
                    <form id="employeeForm">
                        <div class="form-row">
                            <div class="form-group">
                                <label for="empName">Full Name</label>
                                <input type="text" id="empName" class="form-control" placeholder="Enter full name">
                            </div>
                            <div class="form-group">
                                <label for="empEmail">Email</label>
                                <input type="email" id="empEmail" class="form-control" placeholder="Enter email">
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="empPosition">Position</label>
                                <input type="text" id="empPosition" class="form-control" placeholder="Enter position">
                            </div>
                            <div class="form-group">
                                <label for="empDepartment">Department</label>
                                <select id="empDepartment" class="form-control">
                                    <option value="">Select Department</option>
                                    <option value="HR">HR</option>
                                    <option value="IT">IT</option>
                                    <option value="Finance">Finance</option>
                                    <option value="Marketing">Marketing</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="empPhone">Phone</label>
                                <input type="tel" id="empPhone" class="form-control" placeholder="Enter phone number">
                            </div>
                            <div class="form-group">
                                <label for="empJoinDate">Join Date</label>
                                <input type="date" id="empJoinDate" class="form-control">
                            </div>
                        </div>
                        <button type="button" class="btn btn-primary" onclick="addEmployee()">
                            <i class="fas fa-save"></i> Save Employee
                        </button>
                    </form>
                </div>

                <div class="table-container">
                    <div class="table-title">
                        <i class="fas fa-users"></i> Employee List
                    </div>
                    <table id="employeeTable">
                        <thead>
                            <tr>
                                <th>ID</th>
                                <th>Name</th>
                                <th>Position</th>
                                <th>Department</th>
                                <th>Email</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Employee data will appear here -->
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Attendance Tab -->
            <div id="attendance" class="tab-content">
                <div class="form-container">
                    <div class="form-title">
                        <i class="fas fa-calendar-plus"></i> Record Attendance
                    </div>
                    <form id="attendanceForm">
                        <div class="form-row">
                            <div class="form-group">
                                <label for="attendanceDate">Date</label>
                                <input type="date" id="attendanceDate" class="form-control">
                            </div>
                            <div class="form-group">
                                <label for="attendanceEmployee">Employee</label>
                                <select id="attendanceEmployee" class="form-control">
                                    <option value="">Select Employee</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="checkInTime">Check In Time</label>
                                <input type="time" id="checkInTime" class="form-control">
                            </div>
                            <div class="form-group">
                                <label for="checkOutTime">Check Out Time</label>
                                <input type="time" id="checkOutTime" class="form-control">
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="attendanceStatus">Status</label>
                                <select id="attendanceStatus" class="form-control">
                                    <option value="Present">Present</option>
                                    <option value="Absent">Absent</option>
                                    <option value="Late">Late</option>
                                    <option value="Leave">Leave</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="attendanceNotes">Notes</label>
                                <input type="text" id="attendanceNotes" class="form-control" placeholder="Any notes...">
                            </div>
                        </div>
                        <button type="button" class="btn btn-primary" onclick="recordAttendance()">
                            <i class="fas fa-save"></i> Save Attendance
                        </button>
                    </form>
                </div>

                <div class="table-container">
                    <div class="table-title">
                        <i class="fas fa-calendar-alt"></i> Attendance Records
                    </div>
                    <table id="attendanceTable">
                        <thead>
                            <tr>
                                <th>Date</th>
                                <th>Employee</th>
                                <th>Check In</th>
                                <th>Check Out</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Attendance data will appear here -->
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Payroll Tab -->
            <div id="payroll" class="tab-content">
                <div class="form-container">
                    <div class="form-title">
                        <i class="fas fa-calculator"></i> Process Payroll
                    </div>
                    <form id="payrollForm">
                        <div class="form-row">
                            <div class="form-group">
                                <label for="payrollEmployee">Employee</label>
                                <select id="payrollEmployee" class="form-control">
                                    <option value="">Select Employee</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="payrollMonth">Month</label>
                                <input type="month" id="payrollMonth" class="form-control">
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="basicSalary">Basic Salary</label>
                                <input type="number" id="basicSalary" class="form-control" placeholder="Enter basic salary">
                            </div>
                            <div class="form-group">
                                <label for="allowances">Allowances</label>
                                <input type="number" id="allowances" class="form-control" placeholder="Enter allowances">
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="deductions">Deductions</label>
                                <input type="number" id="deductions" class="form-control" placeholder="Enter deductions">
                            </div>
                            <div class="form-group">
                                <label for="netSalary">Net Salary</label>
                                <input type="number" id="netSalary" class="form-control" placeholder="Calculated automatically" readonly>
                            </div>
                        </div>
                        <button type="button" class="btn btn-primary" onclick="processPayroll()">
                            <i class="fas fa-money-bill-wave"></i> Process Payroll
                        </button>
                    </form>
                </div>

                <div class="table-container">
                    <div class="table-title">
                        <i class="fas fa-file-invoice-dollar"></i> Payroll History
                    </div>
                    <table id="payrollTable">
                        <thead>
                            <tr>
                                <th>Employee</th>
                                <th>Month</th>
                                <th>Basic Salary</th>
                                <th>Allowances</th>
                                <th>Deductions</th>
                                <th>Net Salary</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Payroll data will appear here -->
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Tasks Tab -->
            <div id="tasks" class="tab-content">
                <div class="form-container">
                    <div class="form-title">
                        <i class="fas fa-plus-circle"></i> Add New Task
                    </div>
                    <form id="taskForm">
                        <div class="form-row">
                            <div class="form-group">
                                <label for="taskTitle">Task Title</label>
                                <input type="text" id="taskTitle" class="form-control" placeholder="Enter task title">
                            </div>
                            <div class="form-group">
                                <label for="taskAssignee">Assign To</label>
                                <select id="taskAssignee" class="form-control">
                                    <option value="">Select Employee</option>
                                </select>
                            </div>
                        </div>
                        <div class="form-row">
                            <div class="form-group">
                                <label for="taskPriority">Priority</label>
                                <select id="taskPriority" class="form-control">
                                    <option value="Low">Low</option>
                                    <option value="Medium">Medium</option>
                                    <option value="High">High</option>
                                </select>
                            </div>
                            <div class="form-group">
                                <label for="taskDueDate">Due Date</label>
                                <input type="date" id="taskDueDate" class="form-control">
                            </div>
                        </div>
                        <div class="form-group">
                            <label for="taskDescription">Description</label>
                            <textarea id="taskDescription" class="form-control" rows="3" placeholder="Enter task description"></textarea>
                        </div>
                        <button type="button" class="btn btn-primary" onclick="addTask()">
                            <i class="fas fa-plus"></i> Add Task
                        </button>
                    </form>
                </div>

                <div class="table-container">
                    <div class="table-title">
                        <i class="fas fa-tasks"></i> Task List
                    </div>
                    <table id="taskTable">
                        <thead>
                            <tr>
                                <th>Title</th>
                                <th>Assignee</th>
                                <th>Priority</th>
                                <th>Due Date</th>
                                <th>Status</th>
                                <th>Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            <!-- Task data will appear here -->
                        </tbody>
                    </table>
                </div>
            </div>

            <!-- Reports Tab -->
            <div id="reports" class="tab-content">
                <div class="report-card">
                    <div class="report-header">
                        <div class="report-title">Employee Attendance Report</div>
                        <button class="download-btn" onclick="downloadReport('attendance')">
                            <i class="fas fa-download"></i> Download
                        </button>
                    </div>
                    <div class="chart-container">
                        <div class="chart-placeholder">
                            <i class="fas fa-chart-pie" style="font-size: 2rem; margin-right: 10px;"></i>
                            Attendance Distribution Chart
                        </div>
                    </div>
                </div>

                <div class="report-card">
                    <div class="report-header">
                        <div class="report-title">Monthly Payroll Summary</div>
                        <button class="download-btn" onclick="downloadReport('payroll')">
                            <i class="fas fa-download"></i> Download
                        </button>
                    </div>
                    <div class="chart-container">
                        <div class="chart-placeholder">
                            <i class="fas fa-chart-line" style="font-size: 2rem; margin-right: 10px;"></i>
                            Payroll Trends Chart
                        </div>
                    </div>
                </div>

                <div class="report-card">
                    <div class="report-header">
                        <div class="report-title">Task Completion Report</div>
                        <button class="download-btn" onclick="downloadReport('tasks')">
                            <i class="fas fa-download"></i> Download
                        </button>
                    </div>
                    <div class="chart-container">
                        <div class="chart-placeholder">
                            <i class="fas fa-chart-bar" style="font-size: 2rem; margin-right: 10px;"></i>
                            Task Status Chart
                        </div>
                    </div>
                </div>
            </div>

            <!-- Settings Tab -->
            <div id="settings" class="tab-content">
                <div class="settings-section">
                    <div class="settings-title">
                        <i class="fas fa-user-cog"></i> Account Settings
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="userName">Full Name</label>
                            <input type="text" id="userName" class="form-control" value="Rahul Sharma">
                        </div>
                        <div class="form-group">
                            <label for="userEmail">Email</label>
                            <input type="email" id="userEmail" class="form-control" value="admin@officepro.com">
                        </div>
                    </div>
                    <div class="form-row">
                        <div class="form-group">
                            <label for="userPassword">Password</label>
                            <input type="password" id="userPassword" class="form-control" placeholder="Enter new password">
                        </div>
                        <div class="form-group">
                            <label for="userConfirmPassword">Confirm Password</label>
                            <input type="password" id="userConfirmPassword" class="form-control" placeholder="Confirm new password">
                        </div>
                    </div>
                    <button type="button" class="btn btn-primary" onclick="updateAccountSettings()">
                        <i class="fas fa-save"></i> Save Changes
                    </button>
                </div>

                <div class="settings-section">
                    <div class="settings-title">
                        <i class="fas fa-bell"></i> Notification Preferences
                    </div>
                    <div class="settings-option">
                        <div class="option-info">
                            <h4>Email Notifications</h4>
                            <p>Receive important updates via email</p>
                        </div>
                        <label class="toggle-switch">
                            <input type="checkbox" checked>
                            <span class="slider"></span>
                        </label>
                    </div>
                    <div class="settings-option">
                        <div class="option-info">
                            <h4>System Notifications</h4>
                            <p>Get alerts within the application</p>
                        </div>
                        <label class="toggle-switch">
                            <input type="checkbox" checked>
                            <span class="slider"></span>
                        </label>
                    </div>
                    <div class="settings-option">
                        <div class="option-info">
                            <h4>Mobile Push Notifications</h4>
                            <p>Receive notifications on your mobile device</p>
                        </div>
                        <label class="toggle-switch">
                            <input type="checkbox">
                            <span class="slider"></span>
                        </label>
                    </div>
                </div>

                <div class="settings-section">
                    <div class="settings-title">
                        <i class="fas fa-shield-alt"></i> Security Settings
                    </div>
                    <div class="settings-option">
                        <div class="option-info">
                            <h4>Two-Factor Authentication</h4>
                            <p>Add an extra layer of security to your account</p>
                        </div>
                        <label class="toggle-switch">
                            <input type="checkbox">
                            <span class="slider"></span>
                        </label>
                    </div>
                    <div class="settings-option">
                        <div class="option-info">
                            <h4>Login Alerts</h4>
                            <p>Get notified when someone logs into your account</p>
                        </div>
                        <label class="toggle-switch">
                            <input type="checkbox" checked>
                            <span class="slider"></span>
                        </label>
                    </div>
                    <div class="settings-option">
                        <div class="option-info">
                            <h4>Password Reset</h4>
                            <p>Request a password reset link</p>
                        </div>
                        <button class="btn btn-primary" style="padding: 5px 10px; font-size: 0.8rem;">
                            <i class="fas fa-key"></i> Reset Password
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Modal -->
    <div class="modal" id="editModal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title" id="modalTitle">Edit Record</h3>
                <button class="close-modal" onclick="closeModal()">&times;</button>
            </div>
            <div id="modalBody">
                <!-- Dynamic content will be loaded here -->
            </div>
            <div style="margin-top: 20px; text-align: right;">
                <button class="btn btn-primary" onclick="saveEditedRecord()">
                    <i class="fas fa-save"></i> Save Changes
                </button>
                <button class="btn btn-danger" onclick="closeModal()" style="margin-left: 10px;">
                    <i class="fas fa-times"></i> Cancel
                </button>
            </div>
        </div>
    </div>

    <script>
        // DOM Elements
        const sidebar = document.querySelector('.sidebar');
        const sidebarToggle = document.getElementById('sidebarToggle');
        const hideSidebarBtn = document.getElementById('hideSidebar');
        const mobileToggle = document.getElementById('mobileToggle');
        const mainContent = document.querySelector('.main-content');
        const menuItems = document.querySelectorAll('.menu-item');
        const tabContents = document.querySelectorAll('.tab-content');
        const pageTitle = document.getElementById('pageTitle');
        const themeOptions = document.querySelectorAll('.theme-option');
        const editModal = document.getElementById('editModal');
        const modalTitle = document.getElementById('modalTitle');
        const modalBody = document.getElementById('modalBody');

        // Sample data
        let employees = [
            { id: 1, name: "Rahul Sharma", email: "rahul@example.com", position: "HR Manager", department: "HR", phone: "9876543210", joinDate: "2020-01-15" },
            { id: 2, name: "Priya Patel", email: "priya@example.com", position: "Software Developer", department: "IT", phone: "8765432109", joinDate: "2021-03-22" }
        ];
        
        let attendance = [];
        let payroll = [];
        let tasks = [];
        let employeeIdCounter = 3;
        let currentEditingRecord = null;
        let currentEditingType = null;

        // Initialize the app
        document.addEventListener('DOMContentLoaded', function() {
            // Set current date as default for date fields
            const today = new Date().toISOString().split('T')[0];
            document.getElementById('attendanceDate').value = today;
            document.getElementById('empJoinDate').value = today;
            
            // Set current month as default for payroll
            const currentMonth = new Date().toISOString().slice(0, 7);
            document.getElementById('payrollMonth').value = currentMonth;
            
            // Update employee dropdowns
            updateEmployeeDropdowns();
            
            // Load sample data
            loadSampleAttendance();
            loadSamplePayroll();
            loadSampleTasks();
            
            // Initialize employee table
            updateEmployeeTable();
            
            // Hide sidebar by default on mobile
            if (window.innerWidth < 992) {
                sidebar.classList.add('collapsed');
                sidebarToggle.innerHTML = '<i class="fas fa-bars"></i>';
            }
        });

        // Toggle sidebar
        sidebarToggle.addEventListener('click', toggleSidebar);
        mobileToggle.addEventListener('click', toggleSidebar);
        hideSidebarBtn.addEventListener('click', function() {
            sidebar.classList.add('collapsed');
            mainContent.classList.add('expanded');
            sidebarToggle.innerHTML = '<i class="fas fa-bars"></i>';
        });

        function toggleSidebar() {
            sidebar.classList.toggle('collapsed');
            mainContent.classList.toggle('expanded');
            
            // Change icon based on state
            if (sidebar.classList.contains('collapsed')) {
                sidebarToggle.innerHTML = '<i class="fas fa-bars"></i>';
            } else {
                sidebarToggle.innerHTML = '<i class="fas fa-times"></i>';
            }
        }

        // Menu item click handler
        menuItems.forEach(item => {
            item.addEventListener('click', function() {
                // Remove active class from all menu items
                menuItems.forEach(i => i.classList.remove('active'));
                
                // Add active class to clicked item
                this.classList.add('active');
                
                // Get the tab to show
                const tabId = this.getAttribute('data-tab');
                
                // Hide all tab contents
                tabContents.forEach(tab => tab.classList.remove('active'));
                
                // Show the selected tab content
                document.getElementById(tabId).classList.add('active');
                
                // Update page title
                pageTitle.textContent = this.querySelector('span').textContent;
            });
        });

        // Theme switcher
        themeOptions.forEach(option => {
            option.addEventListener('click', function() {
                const theme = this.getAttribute('data-theme');
                changeTheme(theme);
            });
        });

        function changeTheme(theme) {
            const root = document.documentElement;
            
            switch(theme) {
                case 'dark-blue':
                    root.style.setProperty('--primary-color', '#3a0ca3');
                    root.style.setProperty('--secondary-color', '#240046');
                    root.style.setProperty('--accent-color', '#560bad');
                    break;
                case 'purple':
                    root.style.setProperty('--primary-color', '#7209b7');
                    root.style.setProperty('--secondary-color', '#480ca8');
                    root.style.setProperty('--accent-color', '#b5179e');
                    break;
                case 'pink':
                    root.style.setProperty('--primary-color', '#f72585');
                    root.style.setProperty('--secondary-color', '#b5179e');
                    root.style.setProperty('--accent-color', '#7209b7');
                    break;
                case 'teal':
                    root.style.setProperty('--primary-color', '#4cc9f0');
                    root.style.setProperty('--secondary-color', '#4895ef');
                    root.style.setProperty('--accent-color', '#4361ee');
                    break;
                default:
                    root.style.setProperty('--primary-color', '#4361ee');
                    root.style.setProperty('--secondary-color', '#3f37c9');
                    root.style.setProperty('--accent-color', '#4895ef');
            }
        }

        // Employee functions
        function addEmployee() {
            const name = document.getElementById('empName').value;
            const email = document.getElementById('empEmail').value;
            const position = document.getElementById('empPosition').value;
            const department = document.getElementById('empDepartment').value;
            const phone = document.getElementById('empPhone').value;
            const joinDate = document.getElementById('empJoinDate').value;
            
            if (name && email && position && department) {
                const newEmployee = {
                    id: employeeIdCounter++,
                    name: name,
                    email: email,
                    position: position,
                    department: department,
                    phone: phone,
                    joinDate: joinDate
                };
                
                employees.push(newEmployee);
                updateEmployeeTable();
                updateEmployeeDropdowns();
                clearEmployeeForm();
                
                // Show success animation
                const btn = document.querySelector('#employeeForm .btn-primary');
                btn.innerHTML = '<i class="fas fa-check"></i> Employee Added!';
                btn.style.backgroundColor = '#28a745';
                
                setTimeout(() => {
                    btn.innerHTML = '<i class="fas fa-save"></i> Save Employee';
                    btn.style.backgroundColor = '';
                }, 2000);
            } else {
                alert('Please fill all required fields');
            }
        }

        function updateEmployeeTable() {
            const tableBody = document.querySelector('#employeeTable tbody');
            tableBody.innerHTML = '';
            
            employees.forEach(emp => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>EMP${emp.id.toString().padStart(3, '0')}</td>
                    <td>${emp.name}</td>
                    <td>${emp.position}</td>
                    <td>${emp.department}</td>
                    <td>${emp.email}</td>
                    <td class="action-btns">
                        <button class="action-btn" onclick="editEmployee(${emp.id})"><i class="fas fa-edit"></i></button>
                        <button class="action-btn" onclick="deleteEmployee(${emp.id})"><i class="fas fa-trash"></i></button>
                    </td>
                `;
                tableBody.appendChild(row);
            });
        }

        function editEmployee(id) {
            const employee = employees.find(emp => emp.id === id);
            if (!employee) return;
            
            currentEditingRecord = employee;
            currentEditingType = 'employee';
            
            modalTitle.textContent = 'Edit Employee';
            modalBody.innerHTML = `
                <div class="form-row">
                    <div class="form-group">
                        <label for="editEmpName">Full Name</label>
                        <input type="text" id="editEmpName" class="form-control" value="${employee.name}">
                    </div>
                    <div class="form-group">
                        <label for="editEmpEmail">Email</label>
                        <input type="email" id="editEmpEmail" class="form-control" value="${employee.email}">
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="editEmpPosition">Position</label>
                        <input type="text" id="editEmpPosition" class="form-control" value="${employee.position}">
                    </div>
                    <div class="form-group">
                        <label for="editEmpDepartment">Department</label>
                        <select id="editEmpDepartment" class="form-control">
                            <option value="HR" ${employee.department === 'HR' ? 'selected' : ''}>HR</option>
                            <option value="IT" ${employee.department === 'IT' ? 'selected' : ''}>IT</option>
                            <option value="Finance" ${employee.department === 'Finance' ? 'selected' : ''}>Finance</option>
                            <option value="Marketing" ${employee.department === 'Marketing' ? 'selected' : ''}>Marketing</option>
                        </select>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="editEmpPhone">Phone</label>
                        <input type="tel" id="editEmpPhone" class="form-control" value="${employee.phone}">
                    </div>
                    <div class="form-group">
                        <label for="editEmpJoinDate">Join Date</label>
                        <input type="date" id="editEmpJoinDate" class="form-control" value="${employee.joinDate}">
                    </div>
                </div>
            `;
            
            editModal.style.display = 'flex';
        }

        function deleteEmployee(id) {
            if (confirm('Are you sure you want to delete this employee?')) {
                employees = employees.filter(emp => emp.id !== id);
                updateEmployeeTable();
                updateEmployeeDropdowns();
            }
        }

        function clearEmployeeForm() {
            document.getElementById('empName').value = '';
            document.getElementById('empEmail').value = '';
            document.getElementById('empPosition').value = '';
            document.getElementById('empDepartment').value = '';
            document.getElementById('empPhone').value = '';
            document.getElementById('empJoinDate').value = new Date().toISOString().split('T')[0];
        }

        function updateEmployeeDropdowns() {
            const attendanceDropdown = document.getElementById('attendanceEmployee');
            const payrollDropdown = document.getElementById('payrollEmployee');
            const taskDropdown = document.getElementById('taskAssignee');
            
            // Clear existing options except the first one
            while (attendanceDropdown.options.length > 1) attendanceDropdown.remove(1);
            while (payrollDropdown.options.length > 1) payrollDropdown.remove(1);
            while (taskDropdown.options.length > 1) taskDropdown.remove(1);
            
            // Add employee options
            employees.forEach(emp => {
                const option = new Option(`${emp.name} (${emp.department})`, emp.id);
                attendanceDropdown.add(option.cloneNode(true));
                payrollDropdown.add(option.cloneNode(true));
                taskDropdown.add(option.cloneNode(true));
            });
        }

        // Attendance functions
        function loadSampleAttendance() {
            attendance = [
                { id: 1, employeeId: 1, employeeName: "Rahul Sharma", date: "2023-06-15", checkIn: "09:05", checkOut: "18:30", status: "Present", notes: "" },
                { id: 2, employeeId: 2, employeeName: "Priya Patel", date: "2023-06-15", checkIn: "09:15", checkOut: "18:45", status: "Present", notes: "" },
                { id: 3, employeeId: 1, employeeName: "Rahul Sharma", date: "2023-06-14", checkIn: "09:30", checkOut: "18:20", status: "Late", notes: "Traffic delay" },
                { id: 4, employeeId: 2, employeeName: "Priya Patel", date: "2023-06-13", checkIn: "", checkOut: "", status: "Absent", notes: "Sick leave" }
            ];
            
            updateAttendanceTable();
        }

        function recordAttendance() {
            const date = document.getElementById('attendanceDate').value;
            const employeeId = parseInt(document.getElementById('attendanceEmployee').value);
            const checkIn = document.getElementById('checkInTime').value;
            const checkOut = document.getElementById('checkOutTime').value;
            const status = document.getElementById('attendanceStatus').value;
            const notes = document.getElementById('attendanceNotes').value;
            
            if (date && employeeId && status) {
                const employee = employees.find(emp => emp.id === employeeId);
                
                if (employee) {
                    const newAttendance = {
                        id: attendance.length + 1,
                        employeeId: employeeId,
                        employeeName: employee.name,
                        date: date,
                        checkIn: checkIn,
                        checkOut: checkOut,
                        status: status,
                        notes: notes
                    };
                    
                    attendance.push(newAttendance);
                    updateAttendanceTable();
                    clearAttendanceForm();
                    
                    // Show success animation
                    const btn = document.querySelector('#attendanceForm .btn-primary');
                    btn.innerHTML = '<i class="fas fa-check"></i> Record Saved!';
                    btn.style.backgroundColor = '#28a745';
                    
                    setTimeout(() => {
                        btn.innerHTML = '<i class="fas fa-save"></i> Save Attendance';
                        btn.style.backgroundColor = '';
                    }, 2000);
                }
            } else {
                alert('Please fill all required fields');
            }
        }

        function editAttendance(id) {
            const record = attendance.find(rec => rec.id === id);
            if (!record) return;
            
            currentEditingRecord = record;
            currentEditingType = 'attendance';
            
            modalTitle.textContent = 'Edit Attendance Record';
            modalBody.innerHTML = `
                <div class="form-row">
                    <div class="form-group">
                        <label for="editAttDate">Date</label>
                        <input type="date" id="editAttDate" class="form-control" value="${record.date}">
                    </div>
                    <div class="form-group">
                        <label for="editAttEmployee">Employee</label>
                        <select id="editAttEmployee" class="form-control">
                            ${employees.map(emp => 
                                `<option value="${emp.id}" ${emp.id === record.employeeId ? 'selected' : ''}>
                                    ${emp.name} (${emp.department})
                                </option>`
                            ).join('')}
                        </select>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="editAttCheckIn">Check In Time</label>
                        <input type="time" id="editAttCheckIn" class="form-control" value="${record.checkIn || ''}">
                    </div>
                    <div class="form-group">
                        <label for="editAttCheckOut">Check Out Time</label>
                        <input type="time" id="editAttCheckOut" class="form-control" value="${record.checkOut || ''}">
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="editAttStatus">Status</label>
                        <select id="editAttStatus" class="form-control">
                            <option value="Present" ${record.status === 'Present' ? 'selected' : ''}>Present</option>
                            <option value="Absent" ${record.status === 'Absent' ? 'selected' : ''}>Absent</option>
                            <option value="Late" ${record.status === 'Late' ? 'selected' : ''}>Late</option>
                            <option value="Leave" ${record.status === 'Leave' ? 'selected' : ''}>Leave</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="editAttNotes">Notes</label>
                        <input type="text" id="editAttNotes" class="form-control" value="${record.notes || ''}">
                    </div>
                </div>
            `;
            
            editModal.style.display = 'flex';
        }

        function updateAttendanceTable() {
            const tableBody = document.querySelector('#attendanceTable tbody');
            tableBody.innerHTML = '';
            
            attendance.sort((a, b) => new Date(b.date) - new Date(a.date));
            
            attendance.forEach(record => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${record.date}</td>
                    <td>${record.employeeName}</td>
                    <td>${record.checkIn || '-'}</td>
                    <td>${record.checkOut || '-'}</td>
                    <td><span class="status-badge ${record.status.toLowerCase()}">${record.status}</span></td>
                    <td class="action-btns">
                        <button class="action-btn" onclick="editAttendance(${record.id})"><i class="fas fa-edit"></i></button>
                        <button class="action-btn" onclick="deleteAttendance(${record.id})"><i class="fas fa-trash"></i></button>
                    </td>
                `;
                tableBody.appendChild(row);
            });
        }

        function deleteAttendance(id) {
            if (confirm('Are you sure you want to delete this attendance record?')) {
                attendance = attendance.filter(record => record.id !== id);
                updateAttendanceTable();
            }
        }

        function clearAttendanceForm() {
            document.getElementById('attendanceDate').value = new Date().toISOString().split('T')[0];
            document.getElementById('attendanceEmployee').value = '';
            document.getElementById('checkInTime').value = '';
            document.getElementById('checkOutTime').value = '';
            document.getElementById('attendanceStatus').value = 'Present';
            document.getElementById('attendanceNotes').value = '';
        }

        // Payroll functions
        function loadSamplePayroll() {
            payroll = [
                { id: 1, employeeId: 1, employeeName: "Rahul Sharma", month: "2023-05", basicSalary: 50000, allowances: 10000, deductions: 5000, netSalary: 55000, status: "Paid" },
                { id: 2, employeeId: 2, employeeName: "Priya Patel", month: "2023-05", basicSalary: 45000, allowances: 8000, deductions: 4000, netSalary: 49000, status: "Paid" }
            ];
            
            updatePayrollTable();
        }

        function processPayroll() {
            const employeeId = parseInt(document.getElementById('payrollEmployee').value);
            const month = document.getElementById('payrollMonth').value;
            const basicSalary = parseFloat(document.getElementById('basicSalary').value) || 0;
            const allowances = parseFloat(document.getElementById('allowances').value) || 0;
            const deductions = parseFloat(document.getElementById('deductions').value) || 0;
            const netSalary = basicSalary + allowances - deductions;
            
            if (employeeId && month && basicSalary) {
                const employee = employees.find(emp => emp.id === employeeId);
                
                if (employee) {
                    const newPayroll = {
                        id: payroll.length + 1,
                        employeeId: employeeId,
                        employeeName: employee.name,
                        month: month,
                        basicSalary: basicSalary,
                        allowances: allowances,
                        deductions: deductions,
                        netSalary: netSalary,
                        status: "Processed"
                    };
                    
                    payroll.push(newPayroll);
                    updatePayrollTable();
                    clearPayrollForm();
                    
                    // Show success animation
                    const btn = document.querySelector('#payrollForm .btn-primary');
                    btn.innerHTML = '<i class="fas fa-check"></i> Payroll Processed!';
                    btn.style.backgroundColor = '#28a745';
                    
                    setTimeout(() => {
                        btn.innerHTML = '<i class="fas fa-money-bill-wave"></i> Process Payroll';
                        btn.style.backgroundColor = '';
                    }, 2000);
                }
            } else {
                alert('Please fill all required fields');
            }
        }

        function editPayroll(id) {
            const record = payroll.find(p => p.id === id);
            if (!record) return;
            
            currentEditingRecord = record;
            currentEditingType = 'payroll';
            
            modalTitle.textContent = 'Edit Payroll Record';
            modalBody.innerHTML = `
                <div class="form-row">
                    <div class="form-group">
                        <label for="editPayEmployee">Employee</label>
                        <select id="editPayEmployee" class="form-control">
                            ${employees.map(emp => 
                                `<option value="${emp.id}" ${emp.id === record.employeeId ? 'selected' : ''}>
                                    ${emp.name} (${emp.department})
                                </option>`
                            ).join('')}
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="editPayMonth">Month</label>
                        <input type="month" id="editPayMonth" class="form-control" value="${record.month}">
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="editPayBasicSalary">Basic Salary</label>
                        <input type="number" id="editPayBasicSalary" class="form-control" value="${record.basicSalary}">
                    </div>
                    <div class="form-group">
                        <label for="editPayAllowances">Allowances</label>
                        <input type="number" id="editPayAllowances" class="form-control" value="${record.allowances}">
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="editPayDeductions">Deductions</label>
                        <input type="number" id="editPayDeductions" class="form-control" value="${record.deductions}">
                    </div>
                    <div class="form-group">
                        <label for="editPayStatus">Status</label>
                        <select id="editPayStatus" class="form-control">
                            <option value="Processed" ${record.status === 'Processed' ? 'selected' : ''}>Processed</option>
                            <option value="Paid" ${record.status === 'Paid' ? 'selected' : ''}>Paid</option>
                        </select>
                    </div>
                </div>
            `;
            
            editModal.style.display = 'flex';
        }

        function updatePayrollTable() {
            const tableBody = document.querySelector('#payrollTable tbody');
            tableBody.innerHTML = '';
            
            payroll.sort((a, b) => new Date(b.month) - new Date(a.month));
            
            payroll.forEach(record => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${record.employeeName}</td>
                    <td>${record.month}</td>
                    <td>₹${record.basicSalary.toLocaleString('en-IN')}</td>
                    <td>₹${record.allowances.toLocaleString('en-IN')}</td>
                    <td>₹${record.deductions.toLocaleString('en-IN')}</td>
                    <td>₹${record.netSalary.toLocaleString('en-IN')}</td>
                    <td><span class="status-badge ${record.status.toLowerCase()}">${record.status}</span></td>
                    <td class="action-btns">
                        <button class="action-btn" onclick="editPayroll(${record.id})"><i class="fas fa-edit"></i></button>
                        <button class="action-btn" onclick="deletePayroll(${record.id})"><i class="fas fa-trash"></i></button>
                    </td>
                `;
                tableBody.appendChild(row);
            });
        }

        function deletePayroll(id) {
            if (confirm('Are you sure you want to delete this payroll record?')) {
                payroll = payroll.filter(p => p.id !== id);
                updatePayrollTable();
            }
        }

        function clearPayrollForm() {
            document.getElementById('payrollEmployee').value = '';
            document.getElementById('payrollMonth').value = new Date().toISOString().slice(0, 7);
            document.getElementById('basicSalary').value = '';
            document.getElementById('allowances').value = '';
            document.getElementById('deductions').value = '';
            document.getElementById('netSalary').value = '';
        }

        // Task functions
        function loadSampleTasks() {
            tasks = [
                { id: 1, title: "Complete HR Report", assigneeId: 1, assigneeName: "Rahul Sharma", priority: "High", dueDate: "2023-06-20", description: "Prepare quarterly HR performance report", status: "Pending" },
                { id: 2, title: "Update Website Content", assigneeId: 2, assigneeName: "Priya Patel", priority: "Medium", dueDate: "2023-06-25", description: "Update company news and events section", status: "Completed" }
            ];
            
            updateTaskTable();
        }

        function addTask() {
            const title = document.getElementById('taskTitle').value;
            const assigneeId = parseInt(document.getElementById('taskAssignee').value);
            const priority = document.getElementById('taskPriority').value;
            const dueDate = document.getElementById('taskDueDate').value;
            const description = document.getElementById('taskDescription').value;
            
            if (title && assigneeId && dueDate) {
                const employee = employees.find(emp => emp.id === assigneeId);
                
                if (employee) {
                    const newTask = {
                        id: tasks.length + 1,
                        title: title,
                        assigneeId: assigneeId,
                        assigneeName: employee.name,
                        priority: priority,
                        dueDate: dueDate,
                        description: description,
                        status: "Pending"
                    };
                    
                    tasks.push(newTask);
                    updateTaskTable();
                    clearTaskForm();
                    
                    // Show success animation
                    const btn = document.querySelector('#taskForm .btn-primary');
                    btn.innerHTML = '<i class="fas fa-check"></i> Task Added!';
                    btn.style.backgroundColor = '#28a745';
                    
                    setTimeout(() => {
                        btn.innerHTML = '<i class="fas fa-plus"></i> Add Task';
                        btn.style.backgroundColor = '';
                    }, 2000);
                }
            } else {
                alert('Please fill all required fields');
            }
        }

        function editTask(id) {
            const task = tasks.find(t => t.id === id);
            if (!task) return;
            
            currentEditingRecord = task;
            currentEditingType = 'task';
            
            modalTitle.textContent = 'Edit Task';
            modalBody.innerHTML = `
                <div class="form-row">
                    <div class="form-group">
                        <label for="editTaskTitle">Task Title</label>
                        <input type="text" id="editTaskTitle" class="form-control" value="${task.title}">
                    </div>
                    <div class="form-group">
                        <label for="editTaskAssignee">Assign To</label>
                        <select id="editTaskAssignee" class="form-control">
                            ${employees.map(emp => 
                                `<option value="${emp.id}" ${emp.id === task.assigneeId ? 'selected' : ''}>
                                    ${emp.name} (${emp.department})
                                </option>`
                            ).join('')}
                        </select>
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label for="editTaskPriority">Priority</label>
                        <select id="editTaskPriority" class="form-control">
                            <option value="Low" ${task.priority === 'Low' ? 'selected' : ''}>Low</option>
                            <option value="Medium" ${task.priority === 'Medium' ? 'selected' : ''}>Medium</option>
                            <option value="High" ${task.priority === 'High' ? 'selected' : ''}>High</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="editTaskDueDate">Due Date</label>
                        <input type="date" id="editTaskDueDate" class="form-control" value="${task.dueDate}">
                    </div>
                </div>
                <div class="form-group">
                    <label for="editTaskDescription">Description</label>
                    <textarea id="editTaskDescription" class="form-control" rows="3">${task.description}</textarea>
                </div>
                <div class="form-group">
                    <label for="editTaskStatus">Status</label>
                    <select id="editTaskStatus" class="form-control">
                        <option value="Pending" ${task.status === 'Pending' ? 'selected' : ''}>Pending</option>
                        <option value="In Progress" ${task.status === 'In Progress' ? 'selected' : ''}>In Progress</option>
                        <option value="Completed" ${task.status === 'Completed' ? 'selected' : ''}>Completed</option>
                    </select>
                </div>
            `;
            
            editModal.style.display = 'flex';
        }

        function updateTaskTable() {
            const tableBody = document.querySelector('#taskTable tbody');
            tableBody.innerHTML = '';
            
            tasks.sort((a, b) => new Date(a.dueDate) - new Date(b.dueDate));
            
            tasks.forEach(task => {
                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>${task.title}</td>
                    <td>${task.assigneeName}</td>
                    <td><span class="status-badge" style="background: ${getPriorityColor(task.priority)}">${task.priority}</span></td>
                    <td>${task.dueDate}</td>
                    <td><span class="status-badge ${task.status.toLowerCase().replace(' ', '-')}">${task.status}</span></td>
                    <td class="action-btns">
                        <button class="action-btn" onclick="editTask(${task.id})"><i class="fas fa-edit"></i></button>
                        <button class="action-btn" onclick="deleteTask(${task.id})"><i class="fas fa-trash"></i></button>
                    </td>
                `;
                tableBody.appendChild(row);
            });
        }

        function getPriorityColor(priority) {
            switch(priority) {
                case 'High': return '#f8d7da';
                case 'Medium': return '#fff3cd';
                case 'Low': return '#d4edda';
                default: return '#e2e3e5';
            }
        }

        function deleteTask(id) {
            if (confirm('Are you sure you want to delete this task?')) {
                tasks = tasks.filter(task => task.id !== id);
                updateTaskTable();
            }
        }

        function clearTaskForm() {
            document.getElementById('taskTitle').value = '';
            document.getElementById('taskAssignee').value = '';
            document.getElementById('taskPriority').value = 'Medium';
            document.getElementById('taskDueDate').value = '';
            document.getElementById('taskDescription').value = '';
        }

        // Report functions
        function downloadReport(type) {
            let content = '';
            let filename = '';
            
            switch(type) {
                case 'attendance':
                    content = generateAttendanceReport();
                    filename = 'Attendance_Report_' + new Date().toISOString().slice(0, 10) + '.csv';
                    break;
                case 'payroll':
                    content = generatePayrollReport();
                    filename = 'Payroll_Report_' + new Date().toISOString().slice(0, 10) + '.csv';
                    break;
                case 'tasks':
                    content = generateTaskReport();
                    filename = 'Task_Report_' + new Date().toISOString().slice(0, 10) + '.csv';
                    break;
            }
            
            const blob = new Blob([content], { type: 'text/csv' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = filename;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            URL.revokeObjectURL(url);
            
            // Show download confirmation
            alert(`Report downloaded as ${filename}`);
        }

        function generateAttendanceReport() {
            let csv = 'Date,Employee,Check In,Check Out,Status,Notes\n';
            
            attendance.forEach(record => {
                csv += `"${record.date}","${record.employeeName}","${record.checkIn || ''}","${record.checkOut || ''}","${record.status}","${record.notes || ''}"\n`;
            });
            
            return csv;
        }

        function generatePayrollReport() {
            let csv = 'Month,Employee,Basic Salary,Allowances,Deductions,Net Salary,Status\n';
            
            payroll.forEach(record => {
                csv += `"${record.month}","${record.employeeName}","${record.basicSalary}","${record.allowances}","${record.deductions}","${record.netSalary}","${record.status}"\n`;
            });
            
            return csv;
        }

        function generateTaskReport() {
            let csv = 'Title,Assignee,Priority,Due Date,Status,Description\n';
            
            tasks.forEach(task => {
                csv += `"${task.title}","${task.assigneeName}","${task.priority}","${task.dueDate}","${task.status}","${task.description}"\n`;
            });
            
            return csv;
        }

        // Settings functions
        function updateAccountSettings() {
            const name = document.getElementById('userName').value;
            const email = document.getElementById('userEmail').value;
            const password = document.getElementById('userPassword').value;
            const confirmPassword = document.getElementById('userConfirmPassword').value;
            
            if (password && password !== confirmPassword) {
                alert('Passwords do not match');
                return;
            }
            
            // In a real app, you would send this to the server
            alert('Account settings updated successfully');
            
            // Clear password fields
            document.getElementById('userPassword').value = '';
            document.getElementById('userConfirmPassword').value = '';
        }

        // Modal functions
        function closeModal() {
            editModal.style.display = 'none';
            currentEditingRecord = null;
            currentEditingType = null;
        }

        function saveEditedRecord() {
            if (!currentEditingRecord || !currentEditingType) return;
            
            switch(currentEditingType) {
                case 'employee':
                    currentEditingRecord.name = document.getElementById('editEmpName').value;
                    currentEditingRecord.email = document.getElementById('editEmpEmail').value;
                    currentEditingRecord.position = document.getElementById('editEmpPosition').value;
                    currentEditingRecord.department = document.getElementById('editEmpDepartment').value;
                    currentEditingRecord.phone = document.getElementById('editEmpPhone').value;
                    currentEditingRecord.joinDate = document.getElementById('editEmpJoinDate').value;
                    updateEmployeeTable();
                    updateEmployeeDropdowns();
                    break;
                    
                case 'attendance':
                    currentEditingRecord.date = document.getElementById('editAttDate').value;
                    currentEditingRecord.employeeId = parseInt(document.getElementById('editAttEmployee').value);
                    currentEditingRecord.employeeName = employees.find(e => e.id === currentEditingRecord.employeeId).name;
                    currentEditingRecord.checkIn = document.getElementById('editAttCheckIn').value;
                    currentEditingRecord.checkOut = document.getElementById('editAttCheckOut').value;
                    currentEditingRecord.status = document.getElementById('editAttStatus').value;
                    currentEditingRecord.notes = document.getElementById('editAttNotes').value;
                    updateAttendanceTable();
                    break;
                    
                case 'payroll':
                    currentEditingRecord.employeeId = parseInt(document.getElementById('editPayEmployee').value);
                    currentEditingRecord.employeeName = employees.find(e => e.id === currentEditingRecord.employeeId).name;
                    currentEditingRecord.month = document.getElementById('editPayMonth').value;
                    currentEditingRecord.basicSalary = parseFloat(document.getElementById('editPayBasicSalary').value);
                    currentEditingRecord.allowances = parseFloat(document.getElementById('editPayAllowances').value);
                    currentEditingRecord.deductions = parseFloat(document.getElementById('editPayDeductions').value);
                    currentEditingRecord.netSalary = currentEditingRecord.basicSalary + currentEditingRecord.allowances - currentEditingRecord.deductions;
                    currentEditingRecord.status = document.getElementById('editPayStatus').value;
                    updatePayrollTable();
                    break;
                    
                case 'task':
                    currentEditingRecord.title = document.getElementById('editTaskTitle').value;
                    currentEditingRecord.assigneeId = parseInt(document.getElementById('editTaskAssignee').value);
                    currentEditingRecord.assigneeName = employees.find(e => e.id === currentEditingRecord.assigneeId).name;
                    currentEditingRecord.priority = document.getElementById('editTaskPriority').value;
                    currentEditingRecord.dueDate = document.getElementById('editTaskDueDate').value;
                    currentEditingRecord.description = document.getElementById('editTaskDescription').value;
                    currentEditingRecord.status = document.getElementById('editTaskStatus').value;
                    updateTaskTable();
                    break;
            }
            
            closeModal();
        }

        // Calculate net salary automatically
        document.getElementById('basicSalary').addEventListener('input', calculateNetSalary);
        document.getElementById('allowances').addEventListener('input', calculateNetSalary);
        document.getElementById('deductions').addEventListener('input', calculateNetSalary);

        function calculateNetSalary() {
            const basicSalary = parseFloat(document.getElementById('basicSalary').value) || 0;
            const allowances = parseFloat(document.getElementById('allowances').value) || 0;
            const deductions = parseFloat(document.getElementById('deductions').value) || 0;
            const netSalary = basicSalary + allowances - deductions;
            
            document.getElementById('netSalary').value = netSalary.toFixed(2);
        }

        // Close modal when clicking outside
        window.addEventListener('click', function(event) {
            if (event.target === editModal) {
                closeModal();
            }
        });
    </script>
</body>
</html>
